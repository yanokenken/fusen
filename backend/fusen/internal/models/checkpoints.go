// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Checkpoint is an object representing the database table.
type Checkpoint struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	FusenID   int       `boil:"fusen_id" json:"fusen_id" toml:"fusen_id" yaml:"fusen_id"`
	Body      string    `boil:"body" json:"body" toml:"body" yaml:"body"`
	IsChecked bool      `boil:"is_checked" json:"is_checked" toml:"is_checked" yaml:"is_checked"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *checkpointR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L checkpointL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CheckpointColumns = struct {
	ID        string
	FusenID   string
	Body      string
	IsChecked string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	FusenID:   "fusen_id",
	Body:      "body",
	IsChecked: "is_checked",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var CheckpointTableColumns = struct {
	ID        string
	FusenID   string
	Body      string
	IsChecked string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "checkpoints.id",
	FusenID:   "checkpoints.fusen_id",
	Body:      "checkpoints.body",
	IsChecked: "checkpoints.is_checked",
	CreatedAt: "checkpoints.created_at",
	UpdatedAt: "checkpoints.updated_at",
}

// Generated where

var CheckpointWhere = struct {
	ID        whereHelperstring
	FusenID   whereHelperint
	Body      whereHelperstring
	IsChecked whereHelperbool
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"checkpoints\".\"id\""},
	FusenID:   whereHelperint{field: "\"checkpoints\".\"fusen_id\""},
	Body:      whereHelperstring{field: "\"checkpoints\".\"body\""},
	IsChecked: whereHelperbool{field: "\"checkpoints\".\"is_checked\""},
	CreatedAt: whereHelpertime_Time{field: "\"checkpoints\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"checkpoints\".\"updated_at\""},
}

// CheckpointRels is where relationship names are stored.
var CheckpointRels = struct {
	Fusen string
}{
	Fusen: "Fusen",
}

// checkpointR is where relationships are stored.
type checkpointR struct {
	Fusen *Fusen `boil:"Fusen" json:"Fusen" toml:"Fusen" yaml:"Fusen"`
}

// NewStruct creates a new relationship struct
func (*checkpointR) NewStruct() *checkpointR {
	return &checkpointR{}
}

func (r *checkpointR) GetFusen() *Fusen {
	if r == nil {
		return nil
	}
	return r.Fusen
}

// checkpointL is where Load methods for each relationship are stored.
type checkpointL struct{}

var (
	checkpointAllColumns            = []string{"id", "fusen_id", "body", "is_checked", "created_at", "updated_at"}
	checkpointColumnsWithoutDefault = []string{"id", "fusen_id", "body"}
	checkpointColumnsWithDefault    = []string{"is_checked", "created_at", "updated_at"}
	checkpointPrimaryKeyColumns     = []string{"id"}
	checkpointGeneratedColumns      = []string{}
)

type (
	// CheckpointSlice is an alias for a slice of pointers to Checkpoint.
	// This should almost always be used instead of []Checkpoint.
	CheckpointSlice []*Checkpoint
	// CheckpointHook is the signature for custom Checkpoint hook methods
	CheckpointHook func(context.Context, boil.ContextExecutor, *Checkpoint) error

	checkpointQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	checkpointType                 = reflect.TypeOf(&Checkpoint{})
	checkpointMapping              = queries.MakeStructMapping(checkpointType)
	checkpointPrimaryKeyMapping, _ = queries.BindMapping(checkpointType, checkpointMapping, checkpointPrimaryKeyColumns)
	checkpointInsertCacheMut       sync.RWMutex
	checkpointInsertCache          = make(map[string]insertCache)
	checkpointUpdateCacheMut       sync.RWMutex
	checkpointUpdateCache          = make(map[string]updateCache)
	checkpointUpsertCacheMut       sync.RWMutex
	checkpointUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var checkpointAfterSelectMu sync.Mutex
var checkpointAfterSelectHooks []CheckpointHook

var checkpointBeforeInsertMu sync.Mutex
var checkpointBeforeInsertHooks []CheckpointHook
var checkpointAfterInsertMu sync.Mutex
var checkpointAfterInsertHooks []CheckpointHook

var checkpointBeforeUpdateMu sync.Mutex
var checkpointBeforeUpdateHooks []CheckpointHook
var checkpointAfterUpdateMu sync.Mutex
var checkpointAfterUpdateHooks []CheckpointHook

var checkpointBeforeDeleteMu sync.Mutex
var checkpointBeforeDeleteHooks []CheckpointHook
var checkpointAfterDeleteMu sync.Mutex
var checkpointAfterDeleteHooks []CheckpointHook

var checkpointBeforeUpsertMu sync.Mutex
var checkpointBeforeUpsertHooks []CheckpointHook
var checkpointAfterUpsertMu sync.Mutex
var checkpointAfterUpsertHooks []CheckpointHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Checkpoint) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkpointAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Checkpoint) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkpointBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Checkpoint) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkpointAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Checkpoint) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkpointBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Checkpoint) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkpointAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Checkpoint) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkpointBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Checkpoint) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkpointAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Checkpoint) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkpointBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Checkpoint) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkpointAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCheckpointHook registers your hook function for all future operations.
func AddCheckpointHook(hookPoint boil.HookPoint, checkpointHook CheckpointHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		checkpointAfterSelectMu.Lock()
		checkpointAfterSelectHooks = append(checkpointAfterSelectHooks, checkpointHook)
		checkpointAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		checkpointBeforeInsertMu.Lock()
		checkpointBeforeInsertHooks = append(checkpointBeforeInsertHooks, checkpointHook)
		checkpointBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		checkpointAfterInsertMu.Lock()
		checkpointAfterInsertHooks = append(checkpointAfterInsertHooks, checkpointHook)
		checkpointAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		checkpointBeforeUpdateMu.Lock()
		checkpointBeforeUpdateHooks = append(checkpointBeforeUpdateHooks, checkpointHook)
		checkpointBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		checkpointAfterUpdateMu.Lock()
		checkpointAfterUpdateHooks = append(checkpointAfterUpdateHooks, checkpointHook)
		checkpointAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		checkpointBeforeDeleteMu.Lock()
		checkpointBeforeDeleteHooks = append(checkpointBeforeDeleteHooks, checkpointHook)
		checkpointBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		checkpointAfterDeleteMu.Lock()
		checkpointAfterDeleteHooks = append(checkpointAfterDeleteHooks, checkpointHook)
		checkpointAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		checkpointBeforeUpsertMu.Lock()
		checkpointBeforeUpsertHooks = append(checkpointBeforeUpsertHooks, checkpointHook)
		checkpointBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		checkpointAfterUpsertMu.Lock()
		checkpointAfterUpsertHooks = append(checkpointAfterUpsertHooks, checkpointHook)
		checkpointAfterUpsertMu.Unlock()
	}
}

// One returns a single checkpoint record from the query.
func (q checkpointQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Checkpoint, error) {
	o := &Checkpoint{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for checkpoints")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Checkpoint records from the query.
func (q checkpointQuery) All(ctx context.Context, exec boil.ContextExecutor) (CheckpointSlice, error) {
	var o []*Checkpoint

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Checkpoint slice")
	}

	if len(checkpointAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Checkpoint records in the query.
func (q checkpointQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count checkpoints rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q checkpointQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if checkpoints exists")
	}

	return count > 0, nil
}

// Fusen pointed to by the foreign key.
func (o *Checkpoint) Fusen(mods ...qm.QueryMod) fusenQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FusenID),
	}

	queryMods = append(queryMods, mods...)

	return Fusens(queryMods...)
}

// LoadFusen allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkpointL) LoadFusen(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckpoint interface{}, mods queries.Applicator) error {
	var slice []*Checkpoint
	var object *Checkpoint

	if singular {
		var ok bool
		object, ok = maybeCheckpoint.(*Checkpoint)
		if !ok {
			object = new(Checkpoint)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckpoint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckpoint))
			}
		}
	} else {
		s, ok := maybeCheckpoint.(*[]*Checkpoint)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckpoint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckpoint))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &checkpointR{}
		}
		args[object.FusenID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkpointR{}
			}

			args[obj.FusenID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`fusens`),
		qm.WhereIn(`fusens.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Fusen")
	}

	var resultSlice []*Fusen
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Fusen")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for fusens")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fusens")
	}

	if len(fusenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Fusen = foreign
		if foreign.R == nil {
			foreign.R = &fusenR{}
		}
		foreign.R.Checkpoints = append(foreign.R.Checkpoints, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FusenID == foreign.ID {
				local.R.Fusen = foreign
				if foreign.R == nil {
					foreign.R = &fusenR{}
				}
				foreign.R.Checkpoints = append(foreign.R.Checkpoints, local)
				break
			}
		}
	}

	return nil
}

// SetFusen of the checkpoint to the related item.
// Sets o.R.Fusen to related.
// Adds o to related.R.Checkpoints.
func (o *Checkpoint) SetFusen(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Fusen) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkpoints\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fusen_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkpointPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FusenID = related.ID
	if o.R == nil {
		o.R = &checkpointR{
			Fusen: related,
		}
	} else {
		o.R.Fusen = related
	}

	if related.R == nil {
		related.R = &fusenR{
			Checkpoints: CheckpointSlice{o},
		}
	} else {
		related.R.Checkpoints = append(related.R.Checkpoints, o)
	}

	return nil
}

// Checkpoints retrieves all the records using an executor.
func Checkpoints(mods ...qm.QueryMod) checkpointQuery {
	mods = append(mods, qm.From("\"checkpoints\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"checkpoints\".*"})
	}

	return checkpointQuery{q}
}

// FindCheckpoint retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCheckpoint(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Checkpoint, error) {
	checkpointObj := &Checkpoint{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"checkpoints\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, checkpointObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from checkpoints")
	}

	if err = checkpointObj.doAfterSelectHooks(ctx, exec); err != nil {
		return checkpointObj, err
	}

	return checkpointObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Checkpoint) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no checkpoints provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkpointColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	checkpointInsertCacheMut.RLock()
	cache, cached := checkpointInsertCache[key]
	checkpointInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			checkpointAllColumns,
			checkpointColumnsWithDefault,
			checkpointColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(checkpointType, checkpointMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(checkpointType, checkpointMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"checkpoints\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"checkpoints\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into checkpoints")
	}

	if !cached {
		checkpointInsertCacheMut.Lock()
		checkpointInsertCache[key] = cache
		checkpointInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Checkpoint.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Checkpoint) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	checkpointUpdateCacheMut.RLock()
	cache, cached := checkpointUpdateCache[key]
	checkpointUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			checkpointAllColumns,
			checkpointPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update checkpoints, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"checkpoints\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, checkpointPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(checkpointType, checkpointMapping, append(wl, checkpointPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update checkpoints row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for checkpoints")
	}

	if !cached {
		checkpointUpdateCacheMut.Lock()
		checkpointUpdateCache[key] = cache
		checkpointUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q checkpointQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for checkpoints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for checkpoints")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CheckpointSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkpointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"checkpoints\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, checkpointPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in checkpoint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all checkpoint")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Checkpoint) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no checkpoints provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkpointColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	checkpointUpsertCacheMut.RLock()
	cache, cached := checkpointUpsertCache[key]
	checkpointUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			checkpointAllColumns,
			checkpointColumnsWithDefault,
			checkpointColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			checkpointAllColumns,
			checkpointPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert checkpoints, could not build update column list")
		}

		ret := strmangle.SetComplement(checkpointAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(checkpointPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert checkpoints, could not build conflict column list")
			}

			conflict = make([]string, len(checkpointPrimaryKeyColumns))
			copy(conflict, checkpointPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"checkpoints\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(checkpointType, checkpointMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(checkpointType, checkpointMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert checkpoints")
	}

	if !cached {
		checkpointUpsertCacheMut.Lock()
		checkpointUpsertCache[key] = cache
		checkpointUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Checkpoint record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Checkpoint) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Checkpoint provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), checkpointPrimaryKeyMapping)
	sql := "DELETE FROM \"checkpoints\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from checkpoints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for checkpoints")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q checkpointQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no checkpointQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checkpoints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checkpoints")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CheckpointSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(checkpointBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkpointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"checkpoints\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkpointPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checkpoint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checkpoints")
	}

	if len(checkpointAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Checkpoint) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCheckpoint(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CheckpointSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CheckpointSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkpointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"checkpoints\".* FROM \"checkpoints\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkpointPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CheckpointSlice")
	}

	*o = slice

	return nil
}

// CheckpointExists checks if the Checkpoint row exists.
func CheckpointExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"checkpoints\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if checkpoints exists")
	}

	return exists, nil
}

// Exists checks if the Checkpoint row exists.
func (o *Checkpoint) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CheckpointExists(ctx, exec, o.ID)
}
