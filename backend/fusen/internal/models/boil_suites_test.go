// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Boards", testBoards)
	t.Run("Checkpoints", testCheckpoints)
	t.Run("Fusens", testFusens)
	t.Run("Preferences", testPreferences)
	t.Run("Tags", testTags)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Boards", testBoardsDelete)
	t.Run("Checkpoints", testCheckpointsDelete)
	t.Run("Fusens", testFusensDelete)
	t.Run("Preferences", testPreferencesDelete)
	t.Run("Tags", testTagsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Boards", testBoardsQueryDeleteAll)
	t.Run("Checkpoints", testCheckpointsQueryDeleteAll)
	t.Run("Fusens", testFusensQueryDeleteAll)
	t.Run("Preferences", testPreferencesQueryDeleteAll)
	t.Run("Tags", testTagsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Boards", testBoardsSliceDeleteAll)
	t.Run("Checkpoints", testCheckpointsSliceDeleteAll)
	t.Run("Fusens", testFusensSliceDeleteAll)
	t.Run("Preferences", testPreferencesSliceDeleteAll)
	t.Run("Tags", testTagsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Boards", testBoardsExists)
	t.Run("Checkpoints", testCheckpointsExists)
	t.Run("Fusens", testFusensExists)
	t.Run("Preferences", testPreferencesExists)
	t.Run("Tags", testTagsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Boards", testBoardsFind)
	t.Run("Checkpoints", testCheckpointsFind)
	t.Run("Fusens", testFusensFind)
	t.Run("Preferences", testPreferencesFind)
	t.Run("Tags", testTagsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Boards", testBoardsBind)
	t.Run("Checkpoints", testCheckpointsBind)
	t.Run("Fusens", testFusensBind)
	t.Run("Preferences", testPreferencesBind)
	t.Run("Tags", testTagsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Boards", testBoardsOne)
	t.Run("Checkpoints", testCheckpointsOne)
	t.Run("Fusens", testFusensOne)
	t.Run("Preferences", testPreferencesOne)
	t.Run("Tags", testTagsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Boards", testBoardsAll)
	t.Run("Checkpoints", testCheckpointsAll)
	t.Run("Fusens", testFusensAll)
	t.Run("Preferences", testPreferencesAll)
	t.Run("Tags", testTagsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Boards", testBoardsCount)
	t.Run("Checkpoints", testCheckpointsCount)
	t.Run("Fusens", testFusensCount)
	t.Run("Preferences", testPreferencesCount)
	t.Run("Tags", testTagsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Boards", testBoardsHooks)
	t.Run("Checkpoints", testCheckpointsHooks)
	t.Run("Fusens", testFusensHooks)
	t.Run("Preferences", testPreferencesHooks)
	t.Run("Tags", testTagsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Boards", testBoardsInsert)
	t.Run("Boards", testBoardsInsertWhitelist)
	t.Run("Checkpoints", testCheckpointsInsert)
	t.Run("Checkpoints", testCheckpointsInsertWhitelist)
	t.Run("Fusens", testFusensInsert)
	t.Run("Fusens", testFusensInsertWhitelist)
	t.Run("Preferences", testPreferencesInsert)
	t.Run("Preferences", testPreferencesInsertWhitelist)
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BoardToUserUsingUser", testBoardToOneUserUsingUser)
	t.Run("CheckpointToFusenUsingFusen", testCheckpointToOneFusenUsingFusen)
	t.Run("FusenToUserUsingUser", testFusenToOneUserUsingUser)
	t.Run("PreferenceToUserUsingUser", testPreferenceToOneUserUsingUser)
	t.Run("TagToUserUsingUser", testTagToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("FusenToCheckpoints", testFusenToManyCheckpoints)
	t.Run("UserToBoards", testUserToManyBoards)
	t.Run("UserToFusens", testUserToManyFusens)
	t.Run("UserToPreferences", testUserToManyPreferences)
	t.Run("UserToTags", testUserToManyTags)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BoardToUserUsingBoards", testBoardToOneSetOpUserUsingUser)
	t.Run("CheckpointToFusenUsingCheckpoints", testCheckpointToOneSetOpFusenUsingFusen)
	t.Run("FusenToUserUsingFusens", testFusenToOneSetOpUserUsingUser)
	t.Run("PreferenceToUserUsingPreferences", testPreferenceToOneSetOpUserUsingUser)
	t.Run("TagToUserUsingTags", testTagToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("FusenToCheckpoints", testFusenToManyAddOpCheckpoints)
	t.Run("UserToBoards", testUserToManyAddOpBoards)
	t.Run("UserToFusens", testUserToManyAddOpFusens)
	t.Run("UserToPreferences", testUserToManyAddOpPreferences)
	t.Run("UserToTags", testUserToManyAddOpTags)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Boards", testBoardsReload)
	t.Run("Checkpoints", testCheckpointsReload)
	t.Run("Fusens", testFusensReload)
	t.Run("Preferences", testPreferencesReload)
	t.Run("Tags", testTagsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Boards", testBoardsReloadAll)
	t.Run("Checkpoints", testCheckpointsReloadAll)
	t.Run("Fusens", testFusensReloadAll)
	t.Run("Preferences", testPreferencesReloadAll)
	t.Run("Tags", testTagsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Boards", testBoardsSelect)
	t.Run("Checkpoints", testCheckpointsSelect)
	t.Run("Fusens", testFusensSelect)
	t.Run("Preferences", testPreferencesSelect)
	t.Run("Tags", testTagsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Boards", testBoardsUpdate)
	t.Run("Checkpoints", testCheckpointsUpdate)
	t.Run("Fusens", testFusensUpdate)
	t.Run("Preferences", testPreferencesUpdate)
	t.Run("Tags", testTagsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Boards", testBoardsSliceUpdateAll)
	t.Run("Checkpoints", testCheckpointsSliceUpdateAll)
	t.Run("Fusens", testFusensSliceUpdateAll)
	t.Run("Preferences", testPreferencesSliceUpdateAll)
	t.Run("Tags", testTagsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
