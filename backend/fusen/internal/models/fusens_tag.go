// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FusensTag is an object representing the database table.
type FusensTag struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	FusenID   int       `boil:"fusen_id" json:"fusen_id" toml:"fusen_id" yaml:"fusen_id"`
	TagID     int       `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *fusensTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fusensTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FusensTagColumns = struct {
	ID        string
	FusenID   string
	TagID     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	FusenID:   "fusen_id",
	TagID:     "tag_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var FusensTagTableColumns = struct {
	ID        string
	FusenID   string
	TagID     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "fusens_tag.id",
	FusenID:   "fusens_tag.fusen_id",
	TagID:     "fusens_tag.tag_id",
	CreatedAt: "fusens_tag.created_at",
	UpdatedAt: "fusens_tag.updated_at",
}

// Generated where

var FusensTagWhere = struct {
	ID        whereHelperint
	FusenID   whereHelperint
	TagID     whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"fusens_tag\".\"id\""},
	FusenID:   whereHelperint{field: "\"fusens_tag\".\"fusen_id\""},
	TagID:     whereHelperint{field: "\"fusens_tag\".\"tag_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"fusens_tag\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"fusens_tag\".\"updated_at\""},
}

// FusensTagRels is where relationship names are stored.
var FusensTagRels = struct {
}{}

// fusensTagR is where relationships are stored.
type fusensTagR struct {
}

// NewStruct creates a new relationship struct
func (*fusensTagR) NewStruct() *fusensTagR {
	return &fusensTagR{}
}

// fusensTagL is where Load methods for each relationship are stored.
type fusensTagL struct{}

var (
	fusensTagAllColumns            = []string{"id", "fusen_id", "tag_id", "created_at", "updated_at"}
	fusensTagColumnsWithoutDefault = []string{"fusen_id", "tag_id"}
	fusensTagColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	fusensTagPrimaryKeyColumns     = []string{"id"}
	fusensTagGeneratedColumns      = []string{}
)

type (
	// FusensTagSlice is an alias for a slice of pointers to FusensTag.
	// This should almost always be used instead of []FusensTag.
	FusensTagSlice []*FusensTag
	// FusensTagHook is the signature for custom FusensTag hook methods
	FusensTagHook func(context.Context, boil.ContextExecutor, *FusensTag) error

	fusensTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fusensTagType                 = reflect.TypeOf(&FusensTag{})
	fusensTagMapping              = queries.MakeStructMapping(fusensTagType)
	fusensTagPrimaryKeyMapping, _ = queries.BindMapping(fusensTagType, fusensTagMapping, fusensTagPrimaryKeyColumns)
	fusensTagInsertCacheMut       sync.RWMutex
	fusensTagInsertCache          = make(map[string]insertCache)
	fusensTagUpdateCacheMut       sync.RWMutex
	fusensTagUpdateCache          = make(map[string]updateCache)
	fusensTagUpsertCacheMut       sync.RWMutex
	fusensTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fusensTagAfterSelectMu sync.Mutex
var fusensTagAfterSelectHooks []FusensTagHook

var fusensTagBeforeInsertMu sync.Mutex
var fusensTagBeforeInsertHooks []FusensTagHook
var fusensTagAfterInsertMu sync.Mutex
var fusensTagAfterInsertHooks []FusensTagHook

var fusensTagBeforeUpdateMu sync.Mutex
var fusensTagBeforeUpdateHooks []FusensTagHook
var fusensTagAfterUpdateMu sync.Mutex
var fusensTagAfterUpdateHooks []FusensTagHook

var fusensTagBeforeDeleteMu sync.Mutex
var fusensTagBeforeDeleteHooks []FusensTagHook
var fusensTagAfterDeleteMu sync.Mutex
var fusensTagAfterDeleteHooks []FusensTagHook

var fusensTagBeforeUpsertMu sync.Mutex
var fusensTagBeforeUpsertHooks []FusensTagHook
var fusensTagAfterUpsertMu sync.Mutex
var fusensTagAfterUpsertHooks []FusensTagHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FusensTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fusensTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FusensTag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fusensTagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FusensTag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fusensTagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FusensTag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fusensTagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FusensTag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fusensTagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FusensTag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fusensTagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FusensTag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fusensTagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FusensTag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fusensTagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FusensTag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fusensTagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFusensTagHook registers your hook function for all future operations.
func AddFusensTagHook(hookPoint boil.HookPoint, fusensTagHook FusensTagHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fusensTagAfterSelectMu.Lock()
		fusensTagAfterSelectHooks = append(fusensTagAfterSelectHooks, fusensTagHook)
		fusensTagAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		fusensTagBeforeInsertMu.Lock()
		fusensTagBeforeInsertHooks = append(fusensTagBeforeInsertHooks, fusensTagHook)
		fusensTagBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		fusensTagAfterInsertMu.Lock()
		fusensTagAfterInsertHooks = append(fusensTagAfterInsertHooks, fusensTagHook)
		fusensTagAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		fusensTagBeforeUpdateMu.Lock()
		fusensTagBeforeUpdateHooks = append(fusensTagBeforeUpdateHooks, fusensTagHook)
		fusensTagBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		fusensTagAfterUpdateMu.Lock()
		fusensTagAfterUpdateHooks = append(fusensTagAfterUpdateHooks, fusensTagHook)
		fusensTagAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		fusensTagBeforeDeleteMu.Lock()
		fusensTagBeforeDeleteHooks = append(fusensTagBeforeDeleteHooks, fusensTagHook)
		fusensTagBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		fusensTagAfterDeleteMu.Lock()
		fusensTagAfterDeleteHooks = append(fusensTagAfterDeleteHooks, fusensTagHook)
		fusensTagAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		fusensTagBeforeUpsertMu.Lock()
		fusensTagBeforeUpsertHooks = append(fusensTagBeforeUpsertHooks, fusensTagHook)
		fusensTagBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		fusensTagAfterUpsertMu.Lock()
		fusensTagAfterUpsertHooks = append(fusensTagAfterUpsertHooks, fusensTagHook)
		fusensTagAfterUpsertMu.Unlock()
	}
}

// One returns a single fusensTag record from the query.
func (q fusensTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FusensTag, error) {
	o := &FusensTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for fusens_tag")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FusensTag records from the query.
func (q fusensTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (FusensTagSlice, error) {
	var o []*FusensTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FusensTag slice")
	}

	if len(fusensTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FusensTag records in the query.
func (q fusensTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count fusens_tag rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fusensTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if fusens_tag exists")
	}

	return count > 0, nil
}

// FusensTags retrieves all the records using an executor.
func FusensTags(mods ...qm.QueryMod) fusensTagQuery {
	mods = append(mods, qm.From("\"fusens_tag\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"fusens_tag\".*"})
	}

	return fusensTagQuery{q}
}

// FindFusensTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFusensTag(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FusensTag, error) {
	fusensTagObj := &FusensTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"fusens_tag\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, fusensTagObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from fusens_tag")
	}

	if err = fusensTagObj.doAfterSelectHooks(ctx, exec); err != nil {
		return fusensTagObj, err
	}

	return fusensTagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FusensTag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no fusens_tag provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fusensTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fusensTagInsertCacheMut.RLock()
	cache, cached := fusensTagInsertCache[key]
	fusensTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fusensTagAllColumns,
			fusensTagColumnsWithDefault,
			fusensTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fusensTagType, fusensTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fusensTagType, fusensTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"fusens_tag\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"fusens_tag\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into fusens_tag")
	}

	if !cached {
		fusensTagInsertCacheMut.Lock()
		fusensTagInsertCache[key] = cache
		fusensTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FusensTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FusensTag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fusensTagUpdateCacheMut.RLock()
	cache, cached := fusensTagUpdateCache[key]
	fusensTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fusensTagAllColumns,
			fusensTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update fusens_tag, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"fusens_tag\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, fusensTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fusensTagType, fusensTagMapping, append(wl, fusensTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update fusens_tag row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for fusens_tag")
	}

	if !cached {
		fusensTagUpdateCacheMut.Lock()
		fusensTagUpdateCache[key] = cache
		fusensTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fusensTagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for fusens_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for fusens_tag")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FusensTagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fusensTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"fusens_tag\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, fusensTagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fusensTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fusensTag")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FusensTag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no fusens_tag provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fusensTagColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fusensTagUpsertCacheMut.RLock()
	cache, cached := fusensTagUpsertCache[key]
	fusensTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			fusensTagAllColumns,
			fusensTagColumnsWithDefault,
			fusensTagColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fusensTagAllColumns,
			fusensTagPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert fusens_tag, could not build update column list")
		}

		ret := strmangle.SetComplement(fusensTagAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(fusensTagPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert fusens_tag, could not build conflict column list")
			}

			conflict = make([]string, len(fusensTagPrimaryKeyColumns))
			copy(conflict, fusensTagPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"fusens_tag\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(fusensTagType, fusensTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fusensTagType, fusensTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert fusens_tag")
	}

	if !cached {
		fusensTagUpsertCacheMut.Lock()
		fusensTagUpsertCache[key] = cache
		fusensTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FusensTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FusensTag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FusensTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fusensTagPrimaryKeyMapping)
	sql := "DELETE FROM \"fusens_tag\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from fusens_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for fusens_tag")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fusensTagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fusensTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fusens_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fusens_tag")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FusensTagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fusensTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fusensTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"fusens_tag\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fusensTagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fusensTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fusens_tag")
	}

	if len(fusensTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FusensTag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFusensTag(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FusensTagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FusensTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fusensTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"fusens_tag\".* FROM \"fusens_tag\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fusensTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FusensTagSlice")
	}

	*o = slice

	return nil
}

// FusensTagExists checks if the FusensTag row exists.
func FusensTagExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"fusens_tag\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if fusens_tag exists")
	}

	return exists, nil
}

// Exists checks if the FusensTag row exists.
func (o *FusensTag) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FusensTagExists(ctx, exec, o.ID)
}
